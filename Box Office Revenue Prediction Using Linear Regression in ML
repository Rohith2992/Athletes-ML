{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNiUJgQvAYXcF1D5n0O2NZe",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Rohithkvr/Athletes-ML/blob/main/Box%20Office%20Revenue%20Prediction%20Using%20Linear%20Regression%20in%20ML\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "lFVSMGgKmbxH"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sb\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import LabelEncoder, StandardScaler\n",
        "from sklearn.feature_extraction.text import CountVectorizer\n",
        "from sklearn import metrics\n",
        "from xgboost import XGBRegressor\n",
        "\n",
        "import warnings\n",
        "warnings.filterwarnings('ignore')\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv('boxoffice.csv',\n",
        "\t\t\t\tencoding='latin-1')\n",
        "df.head()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 451
        },
        "id": "mT2QFIfdmz6U",
        "outputId": "e13be1b6-5b97-4e10-d8b5-a39da1ed1b9f"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                     title domestic_revenue   world_revenue  \\\n",
              "0  Star Wars: Episode VIII - The Last Jedi     $620,181,382  $1,332,539,889   \n",
              "1                  The Fate of the Furious     $226,008,385  $1,236,005,118   \n",
              "2                             Wonder Woman     $412,563,408    $821,847,012   \n",
              "3           Guardians of the Galaxy Vol. 2     $389,813,101    $863,756,051   \n",
              "4                     Beauty and the Beast     $504,014,165  $1,263,521,126   \n",
              "\n",
              "                           distributor opening_revenue opening_theaters  \\\n",
              "0  Walt Disney Studios Motion Pictures    $220,009,584            4,232   \n",
              "1                   Universal Pictures     $98,786,705            4,310   \n",
              "2                         Warner Bros.    $103,251,471            4,165   \n",
              "3  Walt Disney Studios Motion Pictures    $146,510,104            4,347   \n",
              "4  Walt Disney Studios Motion Pictures    $174,750,616            4,210   \n",
              "\n",
              "         budget   MPAA                               genres release_days  \n",
              "0  $317,000,000  PG-13      Action,Adventure,Fantasy,Sci-Fi          382  \n",
              "1  $250,000,000  PG-13            Action,Adventure,Thriller          262  \n",
              "2  $149,000,000  PG-13  Action,Adventure,Fantasy,Sci-Fi,War          217  \n",
              "3  $200,000,000  PG-13       Action,Adventure,Comedy,Sci-Fi          241  \n",
              "4  $160,000,000     PG       Family,Fantasy,Musical,Romance          290  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d3144fdb-82c2-4b49-9cce-6391f7d3f93d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>title</th>\n",
              "      <th>domestic_revenue</th>\n",
              "      <th>world_revenue</th>\n",
              "      <th>distributor</th>\n",
              "      <th>opening_revenue</th>\n",
              "      <th>opening_theaters</th>\n",
              "      <th>budget</th>\n",
              "      <th>MPAA</th>\n",
              "      <th>genres</th>\n",
              "      <th>release_days</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Star Wars: Episode VIII - The Last Jedi</td>\n",
              "      <td>$620,181,382</td>\n",
              "      <td>$1,332,539,889</td>\n",
              "      <td>Walt Disney Studios Motion Pictures</td>\n",
              "      <td>$220,009,584</td>\n",
              "      <td>4,232</td>\n",
              "      <td>$317,000,000</td>\n",
              "      <td>PG-13</td>\n",
              "      <td>Action,Adventure,Fantasy,Sci-Fi</td>\n",
              "      <td>382</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>The Fate of the Furious</td>\n",
              "      <td>$226,008,385</td>\n",
              "      <td>$1,236,005,118</td>\n",
              "      <td>Universal Pictures</td>\n",
              "      <td>$98,786,705</td>\n",
              "      <td>4,310</td>\n",
              "      <td>$250,000,000</td>\n",
              "      <td>PG-13</td>\n",
              "      <td>Action,Adventure,Thriller</td>\n",
              "      <td>262</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Wonder Woman</td>\n",
              "      <td>$412,563,408</td>\n",
              "      <td>$821,847,012</td>\n",
              "      <td>Warner Bros.</td>\n",
              "      <td>$103,251,471</td>\n",
              "      <td>4,165</td>\n",
              "      <td>$149,000,000</td>\n",
              "      <td>PG-13</td>\n",
              "      <td>Action,Adventure,Fantasy,Sci-Fi,War</td>\n",
              "      <td>217</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Guardians of the Galaxy Vol. 2</td>\n",
              "      <td>$389,813,101</td>\n",
              "      <td>$863,756,051</td>\n",
              "      <td>Walt Disney Studios Motion Pictures</td>\n",
              "      <td>$146,510,104</td>\n",
              "      <td>4,347</td>\n",
              "      <td>$200,000,000</td>\n",
              "      <td>PG-13</td>\n",
              "      <td>Action,Adventure,Comedy,Sci-Fi</td>\n",
              "      <td>241</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Beauty and the Beast</td>\n",
              "      <td>$504,014,165</td>\n",
              "      <td>$1,263,521,126</td>\n",
              "      <td>Walt Disney Studios Motion Pictures</td>\n",
              "      <td>$174,750,616</td>\n",
              "      <td>4,210</td>\n",
              "      <td>$160,000,000</td>\n",
              "      <td>PG</td>\n",
              "      <td>Family,Fantasy,Musical,Romance</td>\n",
              "      <td>290</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d3144fdb-82c2-4b49-9cce-6391f7d3f93d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d3144fdb-82c2-4b49-9cce-6391f7d3f93d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d3144fdb-82c2-4b49-9cce-6391f7d3f93d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c27c2d5d-1257-4e54-aaf1-b8981b9b3ee6\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c27c2d5d-1257-4e54-aaf1-b8981b9b3ee6')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c27c2d5d-1257-4e54-aaf1-b8981b9b3ee6 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 2694,\n  \"fields\": [\n    {\n      \"column\": \"title\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2468,\n        \"samples\": [\n          \"The Lure\",\n          \"Dealt\",\n          \"The Strangers: Prey at Night\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"domestic_revenue\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2495,\n        \"samples\": [\n          \"$22,782,371\",\n          \"$67,745,330\",\n          \"$3,742\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"world_revenue\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2501,\n        \"samples\": [\n          \"$7,566,962\",\n          \"$5,026,154\",\n          \"$1,807,117\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"distributor\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 248,\n        \"samples\": [\n          \"First Run\",\n          \"Bleecker Street Media\",\n          \"CanZion Films\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"opening_revenue\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2176,\n        \"samples\": [\n          \"$21,189\",\n          \"$224,476\",\n          \"$763\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"opening_theaters\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 732,\n        \"samples\": [\n          \"2,812\",\n          \"6\",\n          \"2,929\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"budget\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 124,\n        \"samples\": [\n          \"$52,000,000\",\n          \"$360,000\",\n          \"$23,000,000\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MPAA\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          \"PG\",\n          \"NC-17\",\n          \"PG-13\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"genres\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 567,\n        \"samples\": [\n          \"Adventure,Drama,Mystery,Sci-Fi,Thriller\",\n          \"Comedy,Drama,Romance,War\",\n          \"Adventure,Biography,Documentary,Family,Short\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"release_days\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 457,\n        \"samples\": [\n          \"268\",\n          \"137\",\n          \"320\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.shape\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hEXC6CiknHWw",
        "outputId": "f9500696-1e9c-4427-ab77-f01b02d65feb"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(2694, 10)"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zw3koa1hnLfF",
        "outputId": "cdb34b45-1e2a-4d54-9ccc-934721c10709"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 2694 entries, 0 to 2693\n",
            "Data columns (total 10 columns):\n",
            " #   Column            Non-Null Count  Dtype \n",
            "---  ------            --------------  ----- \n",
            " 0   title             2694 non-null   object\n",
            " 1   domestic_revenue  2694 non-null   object\n",
            " 2   world_revenue     2694 non-null   object\n",
            " 3   distributor       2694 non-null   object\n",
            " 4   opening_revenue   2390 non-null   object\n",
            " 5   opening_theaters  2383 non-null   object\n",
            " 6   budget            397 non-null    object\n",
            " 7   MPAA              1225 non-null   object\n",
            " 8   genres            2655 non-null   object\n",
            " 9   release_days      2694 non-null   object\n",
            "dtypes: object(10)\n",
            "memory usage: 210.6+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe().T\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "EaFYPxpPnQFF",
        "outputId": "ca66e577-3500-417a-f734-a839172eb2a4"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                 count unique                 top freq\n",
              "title             2694   2468  A Beautiful Planet    3\n",
              "domestic_revenue  2694   2495         $11,272,008    3\n",
              "world_revenue     2694   2501         $25,681,505    3\n",
              "distributor       2694    248       Fathom Events  292\n",
              "opening_revenue   2390   2176              $4,696    3\n",
              "opening_theaters  2383    732                   1  503\n",
              "budget             397    124         $40,000,000   14\n",
              "MPAA              1225      8                   R  568\n",
              "genres            2655    567         Documentary  351\n",
              "release_days      2694    457                 347   35"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-70e813d4-2de0-4d04-bf31-83dd339d4120\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "      <th>unique</th>\n",
              "      <th>top</th>\n",
              "      <th>freq</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>title</th>\n",
              "      <td>2694</td>\n",
              "      <td>2468</td>\n",
              "      <td>A Beautiful Planet</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>domestic_revenue</th>\n",
              "      <td>2694</td>\n",
              "      <td>2495</td>\n",
              "      <td>$11,272,008</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>world_revenue</th>\n",
              "      <td>2694</td>\n",
              "      <td>2501</td>\n",
              "      <td>$25,681,505</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>distributor</th>\n",
              "      <td>2694</td>\n",
              "      <td>248</td>\n",
              "      <td>Fathom Events</td>\n",
              "      <td>292</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>opening_revenue</th>\n",
              "      <td>2390</td>\n",
              "      <td>2176</td>\n",
              "      <td>$4,696</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>opening_theaters</th>\n",
              "      <td>2383</td>\n",
              "      <td>732</td>\n",
              "      <td>1</td>\n",
              "      <td>503</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>budget</th>\n",
              "      <td>397</td>\n",
              "      <td>124</td>\n",
              "      <td>$40,000,000</td>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>MPAA</th>\n",
              "      <td>1225</td>\n",
              "      <td>8</td>\n",
              "      <td>R</td>\n",
              "      <td>568</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>genres</th>\n",
              "      <td>2655</td>\n",
              "      <td>567</td>\n",
              "      <td>Documentary</td>\n",
              "      <td>351</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>release_days</th>\n",
              "      <td>2694</td>\n",
              "      <td>457</td>\n",
              "      <td>347</td>\n",
              "      <td>35</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-70e813d4-2de0-4d04-bf31-83dd339d4120')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-70e813d4-2de0-4d04-bf31-83dd339d4120 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-70e813d4-2de0-4d04-bf31-83dd339d4120');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-2452c52e-d79f-4d8e-bb83-5fea6fbecd21\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2452c52e-d79f-4d8e-bb83-5fea6fbecd21')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-2452c52e-d79f-4d8e-bb83-5fea6fbecd21 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"397\",\n        \"max\": \"2694\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"2694\",\n          \"2390\",\n          \"2655\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"unique\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": 8,\n        \"max\": 2501,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          567,\n          2495,\n          732\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"top\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"Documentary\",\n          \"$11,272,008\",\n          \"1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"freq\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"3\",\n        \"max\": \"568\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"3\",\n          \"292\",\n          \"351\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "\n",
        "to_remove = ['world_revenue', 'opening_revenue']\n",
        "df.drop(to_remove, axis=1, inplace=True)\n"
      ],
      "metadata": {
        "id": "qA-vj-_1ncV9"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.isnull().sum() * 100 / df.shape[0]\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "buBkCQnNne-S",
        "outputId": "2f77ded4-d866-4ccb-f32e-77e9559dfe57"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "title                0.000000\n",
              "domestic_revenue     0.000000\n",
              "distributor          0.000000\n",
              "opening_theaters    11.544172\n",
              "budget              85.263549\n",
              "MPAA                54.528582\n",
              "genres               1.447661\n",
              "release_days         0.000000\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Handling the null value columns\n",
        "df.drop('budget', axis=1, inplace=True)\n",
        "\n",
        "for col in ['MPAA', 'genres']:\n",
        "\tdf[col] = df[col].fillna(df[col].mode()[0])\n",
        "\n",
        "df.dropna(inplace=True)\n",
        "\n",
        "df.isnull().sum().sum()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EsXefL5onvJZ",
        "outputId": "e195c040-4eeb-4f37-aa5e-4fb74332606a"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['domestic_revenue'] = df['domestic_revenue'].str[1:]\n",
        "\n",
        "for col in ['domestic_revenue', 'opening_theaters', 'release_days']:\n",
        "\tdf[col] = df[col].str.replace(',', '')\n",
        "\n",
        "\t# Selecting rows with no null values\n",
        "\t# in the columns on which we are iterating.\n",
        "\ttemp = (~df[col].isnull())\n",
        "\tdf[temp][col] = df[temp][col].convert_dtypes(float)\n",
        "\n",
        "\tdf[col] = pd.to_numeric(df[col], errors='coerce')\n"
      ],
      "metadata": {
        "id": "chexIYudnyoL"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df['MPAA'].unique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vVvXn46jp22t",
        "outputId": "04bf072c-a571-4afc-916d-fe050d5e1e9e"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['PG-13', 'PG', 'R', 'Not Rated', 'G', 'NC-17', 'M/PG'],\n",
              "      dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn import preprocessing\n",
        "label_encoder = preprocessing.LabelEncoder()\n",
        "\n",
        "# Encode labels in column 'species'.\n",
        "df['MPAA']= label_encoder.fit_transform(df['MPAA'])\n",
        "\n",
        "df['MPAA'].unique()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7XWJBCebqLD_",
        "outputId": "9858b471-4fd7-4879-c88b-2968895465f9"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([5, 4, 6, 3, 0, 2, 1])"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(10, 5))\n",
        "sb.countplot(df['MPAA'])\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 445
        },
        "id": "QQj0L29qq_Gc",
        "outputId": "a9e56916-17c6-480a-8545-00a00aaea80a"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 345
        },
        "id": "5ynJoIk2rGiW",
        "outputId": "7950b0c4-6890-42ac-86a0-0ccee8d7af48"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                     title  domestic_revenue  \\\n",
              "0  Star Wars: Episode VIII - The Last Jedi         620181382   \n",
              "1                  The Fate of the Furious         226008385   \n",
              "2                             Wonder Woman         412563408   \n",
              "3           Guardians of the Galaxy Vol. 2         389813101   \n",
              "4                     Beauty and the Beast         504014165   \n",
              "\n",
              "                           distributor  opening_theaters  MPAA  \\\n",
              "0  Walt Disney Studios Motion Pictures              4232     5   \n",
              "1                   Universal Pictures              4310     5   \n",
              "2                         Warner Bros.              4165     5   \n",
              "3  Walt Disney Studios Motion Pictures              4347     5   \n",
              "4  Walt Disney Studios Motion Pictures              4210     4   \n",
              "\n",
              "                                genres  release_days  \n",
              "0      Action,Adventure,Fantasy,Sci-Fi           382  \n",
              "1            Action,Adventure,Thriller           262  \n",
              "2  Action,Adventure,Fantasy,Sci-Fi,War           217  \n",
              "3       Action,Adventure,Comedy,Sci-Fi           241  \n",
              "4       Family,Fantasy,Musical,Romance           290  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c768fa06-c65f-4401-92a9-dbb8d45a6dec\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>title</th>\n",
              "      <th>domestic_revenue</th>\n",
              "      <th>distributor</th>\n",
              "      <th>opening_theaters</th>\n",
              "      <th>MPAA</th>\n",
              "      <th>genres</th>\n",
              "      <th>release_days</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Star Wars: Episode VIII - The Last Jedi</td>\n",
              "      <td>620181382</td>\n",
              "      <td>Walt Disney Studios Motion Pictures</td>\n",
              "      <td>4232</td>\n",
              "      <td>5</td>\n",
              "      <td>Action,Adventure,Fantasy,Sci-Fi</td>\n",
              "      <td>382</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>The Fate of the Furious</td>\n",
              "      <td>226008385</td>\n",
              "      <td>Universal Pictures</td>\n",
              "      <td>4310</td>\n",
              "      <td>5</td>\n",
              "      <td>Action,Adventure,Thriller</td>\n",
              "      <td>262</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Wonder Woman</td>\n",
              "      <td>412563408</td>\n",
              "      <td>Warner Bros.</td>\n",
              "      <td>4165</td>\n",
              "      <td>5</td>\n",
              "      <td>Action,Adventure,Fantasy,Sci-Fi,War</td>\n",
              "      <td>217</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Guardians of the Galaxy Vol. 2</td>\n",
              "      <td>389813101</td>\n",
              "      <td>Walt Disney Studios Motion Pictures</td>\n",
              "      <td>4347</td>\n",
              "      <td>5</td>\n",
              "      <td>Action,Adventure,Comedy,Sci-Fi</td>\n",
              "      <td>241</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Beauty and the Beast</td>\n",
              "      <td>504014165</td>\n",
              "      <td>Walt Disney Studios Motion Pictures</td>\n",
              "      <td>4210</td>\n",
              "      <td>4</td>\n",
              "      <td>Family,Fantasy,Musical,Romance</td>\n",
              "      <td>290</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c768fa06-c65f-4401-92a9-dbb8d45a6dec')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c768fa06-c65f-4401-92a9-dbb8d45a6dec button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c768fa06-c65f-4401-92a9-dbb8d45a6dec');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ff8a8154-1ce7-4b13-82f1-08d0c908d66d\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ff8a8154-1ce7-4b13-82f1-08d0c908d66d')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ff8a8154-1ce7-4b13-82f1-08d0c908d66d button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 2383,\n  \"fields\": [\n    {\n      \"column\": \"title\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2181,\n        \"samples\": [\n          \"Let There Be Light\",\n          \"Anna and the Apocalypse\",\n          \"All the Queen's Horses\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"domestic_revenue\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 62441933,\n        \"min\": 147,\n        \"max\": 858373000,\n        \"num_unique_values\": 2193,\n        \"samples\": [\n          74758,\n          9337,\n          3326885\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"distributor\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 227,\n        \"samples\": [\n          \"IFC Films\",\n          \"Yash Raj Films\",\n          \"Kino Lorber\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"opening_theaters\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1245,\n        \"min\": 1,\n        \"max\": 4725,\n        \"num_unique_values\": 732,\n        \"samples\": [\n          2812,\n          6,\n          2929\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MPAA\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          5,\n          4,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"genres\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 517,\n        \"samples\": [\n          \"Musical,Romance\",\n          \"Action,Drama,Fantasy,Horror,Sci-Fi,War\",\n          \"Action,Adventure,Comedy,Family,Fantasy,Mystery\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"release_days\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 397,\n        \"min\": 12,\n        \"max\": 6507,\n        \"num_unique_values\": 395,\n        \"samples\": [\n          522,\n          363,\n          269\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.subplots(figsize=(15, 5))\n",
        "\n",
        "features = ['domestic_revenue', 'opening_theaters', 'release_days']\n",
        "for i, col in enumerate(features):\n",
        "\tplt.subplot(1, 3, i+1)\n",
        "\tsb.distplot(df[col])\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 334
        },
        "id": "1itIlYwErnEp",
        "outputId": "315c3e09-c4f2-42b9-fe21-90f95cfa7172"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x500 with 3 Axes>"
            ],
            "image/png": "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OwjRAQAAAAAAAABoByE6AAAp7Nlnn9XQoUPldDpVVFSkLVu2nHH8iy++qOHDh8vpdGrUqFF65ZVXWt0eDAZVVlamgQMHKiMjQ8XFxdq9e3fk9jfeeEMmk6nNyzvvvBOT5wgAAAAAQCwRogMAkKLWrVunuXPnauHChdq+fbvGjBmjkpISHTlypM3xmzdv1q233qpZs2bp3XffVWlpqUpLS7Vz587ImCeeeELLly/XihUrVFFRoaysLJWUlKipqUmSNGnSJB0+fLjV5dvf/rYKCws1fvz4uDxvAAAAAACiyRQMBoOJnkRX1dXVKTc3V7W1tcrJyUn0dLSmorLN679RNCTOMwEARFNPW286qqioSFdccYWeeeYZSVIgENDgwYN111136cEHHzxt/M033yyXy6WXX345ct2VV16psWPHasWKFQoGgyooKNAPfvAD3XfffZKk2tpa5eXladWqVbrllltOO6bX69WgQYN01113acGCBW3O0+12y+12R36vq6vT4MGDk+71joW23lvwvgIAui9Z1/Zk1tNf8/Y+z0usvQCQLGK51lCJDgBACvJ4PNq2bZuKi4sj15nNZhUXF6u8vLzN+5SXl7caL0klJSWR8fv27VNVVVWrMbm5uSoqKmr3mH/4wx90/PhxzZw5s925Ll68WLm5uZHL4MGDO/w8AQAAAACINUJ0AABS0LFjx+T3+5WXl9fq+ry8PFVVVbV5n6qqqjOON3525pj//d//rZKSEp177rntznXevHmqra2NXA4cOHDmJwcAAAAAQBxZEz0BAACQmj799FP96U9/0m9+85szjnM4HHI4HHGaFQAAAAAAnUMlOgAAKah///6yWCyqrq5udX11dbXy8/PbvE9+fv4Zxxs/O3rMlStXql+/frrpppu6/DwAAAAAAEg0QnQAAFKQ3W7XuHHjtGnTpsh1gUBAmzZt0sSJE9u8z8SJE1uNl6SNGzdGxhcWFio/P7/VmLq6OlVUVJx2zGAwqJUrV2r69Omy2WzReloAAAAAAMQd7VwAAEhRc+fO1YwZMzR+/HhNmDBBy5Ytk8vlimzyOX36dA0aNEiLFy+WJN199926+uqrtWTJEt14441au3attm7dqueee06SZDKZdM899+jRRx/VsGHDVFhYqAULFqigoEClpaWtHvv111/Xvn379O1vfzuuzxkAAAAAgGgjRAcA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jjs0c+ZMjRgxQitWrFBmZqaef/75Nsc//fTTmjJliu6//35dcskleuSRR3T55ZfrmWeekRSqQl+2bJnmz5+vqVOnavTo0Vq9erUOHTqk9evXS5J8Pp/uvvtuPfnkk/rud7+riy66SCNGjNC//uu/tjtPt9uturq6VhcAAIB4MNq52DuwsajU3NKliUp0AEgrhOgAAKQgj8ejbdu2qbi4OHKd2WxWcXGxysvL27xPeXl5q/GSVFJSEhm/b98+VVVVtRqTm5uroqKiyJjt27fr4MGDMpvNuuyyyzRw4EBdf/31rarZP2vx4sXKzc2NXAYPHtzl5w0AANAZxsaiHa1Ed9pC4wjRASC9EKIDAJCCjh07Jr/fr7y8vFbX5+Xlqaqqqs37VFVVnXG88fNMYz7++GNJ0o9+9CPNnz9fL7/8svr06aNrrrlGJ06caPNx582bp9ra2sjlwIEDnXy2AACkjnjvZ7J//37NmjVLhYWFysjI0AUXXKCFCxfK4/G0Os7777+vz33uc3I6nRo8eLCeeOKJ6D3pBGrobDsXe7idi5eNRQEgnfSYEP3xxx+XyWTSPffck+ipAACALgoEQh8of/jDH+prX/uaxo0bp5UrV8pkMunFF19s8z4Oh0M5OTmtLgAApKNE7Geya9cuBQIB/exnP9OHH36o//qv/9KKFSv00EMPRY5RV1en6667Tuedd562bdumJ598Uj/60Y/03HPPxfYFiYN6T8c3FpVo5wIA6apHhOjvvPOOfvazn2n06NGJngoAACmhf//+slgsqq6ubnV9dXW18vPz27xPfn7+GccbP880ZuDAgZKkESNGRG53OBw6//zzVVlZ2Y1nBABA6kvEfiZTpkzRypUrdd111+n888/XTTfdpPvuu08vvfRS5HF+9atfyePx6Pnnn9ell16qW265Rd///ve1dOnSmL8msebqZDuXyMaihOgAkFYSHqLX19frtttu089//nP16dMn0dMBACAl2O12jRs3Tps2bYpcFwgEtGnTJk2cOLHN+0ycOLHVeEnauHFjZHxhYaHy8/Nbjamrq1NFRUVkzLhx4+RwOPTRRx9Fxni9Xu3fv1/nnXde1J4fAACpJlH7mbSltrZWffv2bfU4n//852W321s9zkcffaSTJ0+2eYxk2TjcaOfS2Y1FCdEBIL0kPES/8847deONN5628LclWRZh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nKK9sagUaulS7/apic1FASBldThEz83NlclkivwZAABED+ssAADJhbU7OfnC7VwslmiG6GbVuyU3legAkLI6HKK3PD2NU9UAAIgu1lkAAJILa3dy8oXbudjM0emJLkkOa6gPOpXoAJC6urRqNDY2qqGhIfL7J598omXLlum1116L2sQAAEhXrLMAACQX1u7kYbRzsUSxnYvDFopWmrxUogNAqupSiD516lStXr1aklRTU6MJEyZoyZIlmjp1qn76059GdYIAAKQb1lkAAJILa3fyMNq5RLUneqQSnRAdAFJVl0L07du363Of+5wk6be//a3y8/P1ySefaPXq1Vq+fHlUJwgAQLphnQUAILmwdicPo52L1RK9di7OSCU67VwAIFV1adVoaGhQr169JEmvvfaavvrVr8psNuvKK6/UJ598EtUJAgCQblhnAQBILqzdycMfiEElui1Uic7GogCQuroUol944YVav369Dhw4oD/96U+67rrrJElHjhxRTk5OVCcIAEC6YZ0FACC5sHYnB38gqHCGLqslBiE6legAkLK6FKKXlZXpvvvu09ChQ1VUVKSJEydKCn3jftlll0V1ggAApBvWWQAAkgtrd3IwqtAlyWqOXjsXhzXczoVKdABIWdau3OnrX/+6Jk+erMOHD2vMmDGR67/4xS/qK1/5StQmBwBAOmKdBQAgubB2Jwefv7lS3BKDdi5sLAoAqatLIbok5efnKz8/v9V1EyZM6PaEAAAA6ywAAMmGtbvn84Ur0c2maIfobCwKAKmuSyG6y+XS448/rk2bNunIkSMKBFovFB9//HFUJpdMTjV59ZutB3Rxfi+NObd3oqcDAEhirLMAACQX1u7k4ItsKhq9Vi6S5LCysSgApLouhejf/va39eabb+qb3/ymBg4cKJMpet/gJqtfvl2pHQdqdLCmkRAdANAtrLMAACQX1u7kYLRziWYVutSynQuV6ACQqroUor/66qv64x//qKuuuira80lKgUBQv95SKUmqa/QmeDYAgGTHOgsAQHJh7U4ORiW6zRLdED2ysSg90QEgZXXpHKY+ffqob9++0Z5L0tq897gqTzRIkty+gNwsnACAbmCdBQAgubB2JwcjRKcSHQDQWV0K0R955BGVlZWpoaEh2vNJSkYVuqG2iWp0AEDXsc4CAJBcWLuTg9HOxWqJbk90Y2NReqIDQOrqUjuXJUuWaO/evcrLy9PQoUNls9la3b59+/aoTC4Z1DR49KcPqySFTuFy+wKqa/RpQK8ETwwAkLRYZwEASC6s3cmheWNRKtEBAJ3TpRC9tLQ0ytNIXgdONMoXCCovx6FeDpv2HK1XHZXoAIBuYJ0FACC5sHYnB58/ViE6legAkOq6FKIvXLgw2vNIWicbPJKkPpl2ZdpD3z6zuSgAoDtYZwEASC6s3cnBF4hNOxeH1ahEJ0QHgFTV5ZWjpqZGv/jFLzRv3jydOHFCUugUtYMHD0ZtcsmgJhyY9860KccZOmWPSnQAQHexzgIAkFxYu3u+2LVzCUUrtHMBgNTVpUr0999/X8XFxcrNzdX+/ft1xx13qG/fvnrppZdUWVmp1atXR3uePVZtuBK9d4Zddmto4axr9CVySgCAJMc6CwBAcmHtTg7+WLVzCVei084FAFJXlyrR586dq9tvv127d++W0+mMXH/DDTforbfeitrkksHJBirRAQDRxToLAEByYe1ODt5YtXNhY1EASHldqkR/55139LOf/ey06wcNGqSqqqpuTyqZ1ERCdLuML7Nr6YkOAOgG1lkAAJILa3dy8Me8nQuV6ACQqroUojscDtXV1Z12/T//+U+dc8453Z5UMqlpDLdzybRFrqtv8skfCMoS5YUZAJAeWGcBAEgurN3JwWu0c7FE97M6G4sCQOrr0jlMN910kxYtWiSvN1RxbTKZVFlZqf/4j//Q1772tahOsKerNSrRM2zKdlhlNklBSfVu+qIDALqGdRYAgOTC2p0c/OF2LhZzdNu5RCrRfbRzAYBU1aWVY8mSJaqvr9c555yjxsZGXX311brwwgvVq1cvPfbYY9GeY4920thYNNMus8mkXkZfdFq6AAC6iHUWAIDkwtqdHHzhSnRb1Nu5hCrRPb6AgsFgVI8NAOgZutTOJTc3Vxs3btTf/vY3vffee6qvr9fll1+u4uLiaM+vx6tpbN5Y9ITLoxynVbWNXtU2ejU4wXMDACQn1lkAAJILa3dy8IV7olui3M7FCNElye0LtPodAJAaOh2iBwIBrVq1Si+99JL2798vk8mkwsJC5efnKxgMymRKrz7gkXYu4Z7oORk26WSj6pqoRAcAdB7rLAAAyYW1O3n4wu1crNFu52JtPl6T10+IDgApqFMrRzAY1E033aRvf/vbOnjwoEaNGqVLL71Un3zyiW6//XZ95StfidU8e6RgMNhciZ5hlyTlRNq50BMdANA5rLMAACQX1u7kYrRzsUa5nYvVYpYlfMwmL33RASAVdaoSfdWqVXrrrbe0adMmXXvtta1ue/3111VaWqrVq1dr+vTpUZ1kT3XK7ZM/fDpYq0p0iUp0AECnsc4CAJBcWLuTi9HOxRrldi5SqBrd5fGryeuP+rEBAInXqUr0X//613rooYdOe3MgSV/4whf04IMP6le/+lXUJtfTGa1cnDZz5HStbEfoe4kGD5XoAIDOYZ0FACC5sHYnl0iIHuV2LlJzX3S3j0p0AEhFnVo53n//fU2ZMqXd26+//nq999573Z5UsqhpaN3KRZIc4V5onMIFAOgs1lkAAJILa3dy8fnDPdFjUYkeDtGpRAeA1NSpEP3EiRPKy8tr9/a8vDydPHmy25NKFicbPJKaW7lILb99ZuEEAHQO6ywAAMmFtTu5NFeiRz9Ed9iMgjqyAABIRZ0K0f1+v6zW9tuoWywW+Xzp08YksqloqxCdSnQAQNewzgIAkFxYu5NLpBI9Bu1cHNZwJTrtXAAgJXVqY9FgMKjbb79dDoejzdvdbndUJpUsao1K9FbtXKhEBwB0DessAADJhbU7ufhjubEolegAkNI6FaLPmDHjrGPSadfxkw3tV6K7vQEFg0GZTNFfnAEAqYl1FgCA5MLanVy8MWzn4rSysSgApLJOhegrV66M1TySkrGxaG6LEN2oRA9K8vgCcoR7pAMAcDasswAAJBfW7uTij2WITiU6AKS06DcCSyM1jaF2Ln0ym9u52CwmGesxvdAAAAAAAOgZIj3RLdGPQpzhAjo3IToApCRC9G6oNdq5ZDRXoptMpuYNRVg8AQAAAADoEXzhSnRLDCrRHVajEp1iOgBIRYTo3XDS2Fi0RTsXqUVfdCrRAQAAAADoEXz+UIhui2ElOsV0AJCaCNG7oabR2FjU3up6TuMCAAAAAKBn8QVChW6xqESP5AAU0wFASiJE74ZIO5fPVKJHTuNi8QQAAAAAIOH8gaDC3Vxki0U7FzYWBYCUZk30BJJVMBhsrkTPaF2JbvREpxIdAAAAAIDE87QocrNYoheir6molCTtrq6XJH1wsDZy3TeKhkTtcQAAiUUlehe5PH75w19j52S0/i7C6IlOJToAINGeffZZDR06VE6nU0VFRdqyZcsZx7/44osaPny4nE6nRo0apVdeeaXV7cFgUGVlZRo4cKAyMjJUXFys3bt3txpz0003aciQIXI6nRo4cKC++c1v6tChQ1F/bgAAAB3l9jUXuVnN0Y9CjOp2b7jvOgAgtRCid1GD2ydJMpmkjHDvM4ODDUUAAD3AunXrNHfuXC1cuFDbt2/XmDFjVFJSoiNHjrQ5fvPmzbr11ls1a9YsvfvuuyotLVVpaal27twZGfPEE09o+fLlWrFihSoqKpSVlaWSkhI1NTVFxlx77bX6zW9+o48++kj/8z//o7179+rrX/96zJ8vAABAe4xKdJNi0xPdGt6s1OunmA4AUhEhehc1eEIBeZbdKpOp9QLspJ0LAKAHWLp0qe644w7NnDlTI0aM0IoVK5SZmannn3++zfFPP/20pkyZovvvv1+XXHKJHnnkEV1++eV65plnJIWq0JctW6b58+dr6tSpGj16tFavXq1Dhw5p/fr1kePce++9uvLKK3Xeeedp0qRJevDBB/X222/L6/W2+bhut1t1dXWtLgAApKtEnEX22GOPadKkScrMzFTv3r3bfJzKykrdeOONyszM1IABA3T//ffL5/N167nGk7HhpzWKrVxasoVDdF+ASnQASEUJDdEXL16sK664Qr169dKAAQNUWlqqjz76KJFT6jCXJ/RmIcNuOe02o50Lu3IDABLF4/Fo27ZtKi4ujlxnNptVXFys8vLyNu9TXl7earwklZSURMbv27dPVVVVrcbk5uaqqKio3WOeOHFCv/rVrzRp0iTZbLY2xyxevFi5ubmRy+DBgzv1XAEASBWJOovM4/Fo2rRp+t73vtfm4/j9ft14443yeDzavHmzXnjhBa1atUplZWXRfQFiKBKix6CViyTZwuG8j0p0AEhJCQ3R33zzTd155516++23tXHjRnm9Xl133XVyuVyJnFaHNFeinx6iO6zsyg0ASKxjx47J7/crLy+v1fV5eXmqqqpq8z5VVVVnHG/87Mgx/+M//kNZWVnq16+fKisr9fvf/77duc6bN0+1tbWRy4EDBzr2JAEASDGJOovs4Ycf1r333qtRo0a1+Tivvfaa/v73v+uXv/ylxo4dq+uvv16PPPKInn32WXk8nqi/DrFg9ESPVSU67VwAILUlNETfsGGDbr/9dl166aUaM2aMVq1apcrKSm3btq3N8T3pdG9XuCd6pt16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ap6XlxcdOXJE6Au4uLgItT47O5vatWtHX375JWVlZdG5c+fIx8eHJk6cKKzD2dmZ2rdvTxs3bqRr165RZGQkaWlp0e+//05ERLm5uQSAkpKSiOh/tdbf35/i4uLoypUr1LdvXwoICBCW+eOPP5KBgQH98MMPlJmZScuXLycTExPq3r17kzmXlpbSqFGjaPDgwVRQUEAFBQVUUVEhxOHp6Un79++nzMxMeuedd8jZ2Zmqqqqane/3339PBw8epJycHDp//jwpFAoaMmQIEVGjfZWm+hIN9UG6dOlC48ePp4yMDMrKyqIdO3ZQcnLyX/xEMMYYa+v69etHRkZGNG/ePPr999/pwoULZGVlRQsWLKCMjAy6fPkyDRw4kPr37y96z9PH200d0//3v/+ltWvXUlJSEuXk5NBXX31F2traFB8fT0REf/75J+no6NAXX3xBubm5lJqaShs3bqTS0lIietIPsLOzo507d9L169dp586d1L59e4qOjm4yv9LSUrKysqJx48ZReno67du3jzp06CDqi1RWVtKSJUsoISGBrl+/Tj/++CPJ5XL6z3/+IyzH3d2d1qxZI7yurKwkS0tL+uGHH4io4XELxqSKB9FZm1VaWkp6enq0Y8cOYVpxcTEZGhrSrFmzKCsriwDQuXPnhPl37twhQ0ND4T1RUVEEgLKzs4U206ZNI7lcLhQ/IqKgoCCaNm0aERHl5eWRtrY23bx5UxTPgAEDaMGCBURE5O3tTcuWLas37poDzHv37ommP13UMzMzCQAdPXr0GbfK/5a/Z88eYdrjx49JLpfTb7/9JmobGhpKY8eOJSKipKQkkslklJeXR0RESqWSHBwcaNOmTUREdObMGTIxMaHHjx+LluHm5kbffvstET0ZRJfL5fTgwQNh/rx588jf31943dQgenPWw6St9iB6TEwMaWtr0++//07Xrl0T/RUUFBAR0eLFi8nPz0+0nD/++IMA0Pnz519m+IyxFlRWVka6urq0bds2YVplZSXZ29vTmjVrhJr39I/MNX2BmoPI0NBQev/990XLPXPmDGlpadGjR4+I6EltGj9+vDBfpVKRtbW1UAMbGkQ/duyY8J4DBw4QAGGZ/v7+FBYWJlpv7969mzWITkQUEhJCw4cPF02rieO7774Tpl25coUAUEZGRrPzrS0hIYEACH2f+voqzelL1NcHISIy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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.subplots(figsize=(15, 5))\n",
        "for i, col in enumerate(features):\n",
        "\tplt.subplot(1, 3, i+1)\n",
        "\tsb.boxplot(df[col])\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 334
        },
        "id": "9eH-8VELsmN0",
        "outputId": "996c2c6d-e738-4025-fa2f-eabae5210d3b"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x500 with 3 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for col in features:\n",
        "  df[col] = df[col].apply(lambda x: np.log10(x))\n"
      ],
      "metadata": {
        "id": "gwKdngUXs3sX"
      },
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df['MPAA'].unique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xSTi8pvNth0d",
        "outputId": "2bcbdfdb-0c76-4bad-a8b4-da09d1a03d93"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([5, 4, 6, 3, 0, 2, 1])"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.subplots(figsize=(15, 5))\n",
        "for i, col in enumerate(features):\n",
        "\tplt.subplot(1, 3, i+1)\n",
        "\tsb.distplot(df[col])\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 335
        },
        "id": "-KXOq66etRxw",
        "outputId": "7401e99b-f279-4db1-fde9-4a666d8c76d4"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x500 with 3 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "vectorizer = CountVectorizer()\n",
        "vectorizer.fit(df['genres'])\n",
        "features = vectorizer.transform(df['genres']).toarray()\n",
        "\n",
        "genres = vectorizer.get_feature_names_out()\n",
        "for i, name in enumerate(genres):\n",
        "\tdf[name] = features[:, i]\n",
        "\n",
        "df.drop('genres', axis=1, inplace=True)\n"
      ],
      "metadata": {
        "id": "QvaPQJCwtyk7"
      },
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "genres\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "A05U_44muVap",
        "outputId": "619e2fe1-6e8c-4162-abaa-bd6e52c84588"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['action', 'adult', 'adventure', 'animation', 'biography', 'comedy',\n",
              "       'crime', 'documentary', 'drama', 'family', 'fantasy', 'fi', 'film',\n",
              "       'history', 'horror', 'music', 'musical', 'mystery', 'news', 'noir',\n",
              "       'reality', 'romance', 'sci', 'short', 'sport', 'thriller', 'tv',\n",
              "       'war', 'western'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "removed = 0\n",
        "for col in df.loc[:, 'action':'western'].columns:\n",
        "\n",
        "\t# Removing columns having more\n",
        "\t# than 95% of the values as zero.\n",
        "\tif (df[col] == 0).mean() > 0.95:\n",
        "\t\tremoved += 1\n",
        "\t\tdf.drop(col, axis=1, inplace=True)\n",
        "\n",
        "print(removed)\n",
        "print(df.shape)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ww92Wy5WumrU",
        "outputId": "cad20c93-3b62-498b-c479-af4078423612"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "11\n",
            "(2383, 24)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for col in ['distributor', 'MPAA']:\n",
        "\tle = LabelEncoder()\n",
        "\tdf[col] = le.fit_transform(df[col])\n"
      ],
      "metadata": {
        "id": "yBab-4cFurin"
      },
      "execution_count": 35,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Correction"
      ],
      "metadata": {
        "id": "gI3GU9_iwI0b"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "plt.figure(figsize=(8, 8))\n",
        "sb.heatmap(df.corr() > 0.8,\n",
        "\t\tannot=True,\n",
        "\t\tcbar=False)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 389
        },
        "id": "2LCIB1Otuub8",
        "outputId": "36535c6a-818a-433a-cdbf-cd76fbafda2f"
      },
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "could not convert string to float: 'Star Wars: Episode VIII - The Last Jedi'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-58-0fb222288f56>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m8\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m8\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m sb.heatmap(df.corr() > 0.8,\n\u001b[0m\u001b[1;32m      3\u001b[0m                 \u001b[0mannot\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \t\tcbar=False)\n\u001b[1;32m      5\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36mcorr\u001b[0;34m(self, method, min_periods, numeric_only)\u001b[0m\n\u001b[1;32m  10052\u001b[0m         \u001b[0mcols\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m  10053\u001b[0m         \u001b[0midx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcols\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m> 10054\u001b[0;31m         \u001b[0mmat\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_numpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfloat\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mna_value\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnan\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m  10055\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m  10056\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mmethod\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"pearson\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36mto_numpy\u001b[0;34m(self, dtype, copy, na_value)\u001b[0m\n\u001b[1;32m   1836\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mdtype\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1837\u001b[0m             \u001b[0mdtype\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1838\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_mgr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mas_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mna_value\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mna_value\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1839\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1840\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/internals/managers.py\u001b[0m in \u001b[0;36mas_array\u001b[0;34m(self, dtype, copy, na_value)\u001b[0m\n\u001b[1;32m   1730\u001b[0m                 \u001b[0marr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mflags\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwriteable\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1731\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1732\u001b[0;31m             \u001b[0marr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_interleave\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mna_value\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mna_value\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1733\u001b[0m             \u001b[0;31m# The underlying data was copied within _interleave, so no need\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1734\u001b[0m             \u001b[0;31m# to further copy if copy=True or setting na_value\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/internals/managers.py\u001b[0m in \u001b[0;36m_interleave\u001b[0;34m(self, dtype, na_value)\u001b[0m\n\u001b[1;32m   1792\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1793\u001b[0m                 \u001b[0marr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mblk\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_values\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1794\u001b[0;31m             \u001b[0mresult\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrl\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0marr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1795\u001b[0m             \u001b[0mitemmask\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrl\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1796\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: could not convert string to float: 'Star Wars: Episode VIII - The Last Jedi'"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x800 with 0 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "features = df.drop(['title', 'domestic_revenue','fi'], axis=1)\n",
        "target = df['domestic_revenue'].values\n",
        "\n",
        "X_train, X_val,\\\n",
        "\tY_train, Y_val = train_test_split(features, target,\n",
        "\t\t\t\t\t\t\t\t\ttest_size=0.1,\n",
        "\t\t\t\t\t\t\t\t\trandom_state=22)\n",
        "X_train.shape, X_val.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "G1_aK-7pwMDs",
        "outputId": "5129434d-b345-4695-a0e4-a01a6e65ef3d"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((2144, 21), (239, 21))"
            ]
          },
          "metadata": {},
          "execution_count": 43
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Normalizing the features for stable and fast training.\n",
        "scaler = StandardScaler()\n",
        "X_train = scaler.fit_transform(X_train)\n",
        "X_val = scaler.transform(X_val)\n"
      ],
      "metadata": {
        "id": "qjwEvhGWwaFw"
      },
      "execution_count": 44,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import mean_absolute_error as mae\n",
        "model = XGBRegressor()\n",
        "model.fit(X_train, Y_train)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 248
        },
        "id": "sAcEd9EDweFh",
        "outputId": "92507432-32be-4f14-a5df-6f2a14379924"
      },
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "XGBRegressor(base_score=None, booster=None, callbacks=None,\n",
              "             colsample_bylevel=None, colsample_bynode=None,\n",
              "             colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
              "             enable_categorical=False, eval_metric=None, feature_types=None,\n",
              "             gamma=None, grow_policy=None, importance_type=None,\n",
              "             interaction_constraints=None, learning_rate=None, max_bin=None,\n",
              "             max_cat_threshold=None, max_cat_to_onehot=None,\n",
              "             max_delta_step=None, max_depth=None, max_leaves=None,\n",
              "             min_child_weight=None, missing=nan, monotone_constraints=None,\n",
              "             multi_strategy=None, n_estimators=None, n_jobs=None,\n",
              "             num_parallel_tree=None, random_state=None, ...)"
            ],
            "text/html": [
              "<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBRegressor(base_score=None, booster=None, callbacks=None,\n",
              "             colsample_bylevel=None, colsample_bynode=None,\n",
              "             colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
              "             enable_categorical=False, eval_metric=None, feature_types=None,\n",
              "             gamma=None, grow_policy=None, importance_type=None,\n",
              "             interaction_constraints=None, learning_rate=None, max_bin=None,\n",
              "             max_cat_threshold=None, max_cat_to_onehot=None,\n",
              "             max_delta_step=None, max_depth=None, max_leaves=None,\n",
              "             min_child_weight=None, missing=nan, monotone_constraints=None,\n",
              "             multi_strategy=None, n_estimators=None, n_jobs=None,\n",
              "             num_parallel_tree=None, random_state=None, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBRegressor</label><div class=\"sk-toggleable__content\"><pre>XGBRegressor(base_score=None, booster=None, callbacks=None,\n",
              "             colsample_bylevel=None, colsample_bynode=None,\n",
              "             colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
              "             enable_categorical=False, eval_metric=None, feature_types=None,\n",
              "             gamma=None, grow_policy=None, importance_type=None,\n",
              "             interaction_constraints=None, learning_rate=None, max_bin=None,\n",
              "             max_cat_threshold=None, max_cat_to_onehot=None,\n",
              "             max_delta_step=None, max_depth=None, max_leaves=None,\n",
              "             min_child_weight=None, missing=nan, monotone_constraints=None,\n",
              "             multi_strategy=None, n_estimators=None, n_jobs=None,\n",
              "             num_parallel_tree=None, random_state=None, ...)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 60
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Create and train an XGBoost model\n",
        "model = XGBRegressor()\n",
        "model.fit(X_train, Y_train)\n",
        "\n",
        "# Make predictions on the validation set\n",
        "val_preds = model.predict(X_val)\n"
      ],
      "metadata": {
        "id": "L2zEy6gswjad"
      },
      "execution_count": 62,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Create and train an XGBoost model\n",
        "model = XGBRegressor()\n",
        "model.fit(X_train, Y_train)\n",
        "\n",
        "# Make predictions on the validation set\n",
        "val_preds = model.predict(X_val)\n",
        "\n",
        "# Calculate the Mean Absolute Error on the validation set\n",
        "validation_error = mean_absolute_error(Y_val, val_preds)\n",
        "print(f'Validation Error: {validation_error}')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 201
        },
        "id": "iSOE6_l30Po4",
        "outputId": "c090c3df-a30f-4c09-81d8-84d22e555100"
      },
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'mean_absolute_error' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-66-3eb50e053985>\u001b[0m in \u001b[0;36m<cell line: 9>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;31m# Calculate the Mean Absolute Error on the validation set\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m \u001b[0mvalidation_error\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmean_absolute_error\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mY_val\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mval_preds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     10\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf'Validation Error: {validation_error}'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'mean_absolute_error' is not defined"
          ]
        }
      ]
    }
  ]
}